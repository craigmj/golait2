package {{.PackageName}};

import android.os.Handler;
import android.os.Looper;
import android.util.Log;

import com.koushikdutta.async.http.AsyncHttpClient;
import com.koushikdutta.async.http.AsyncHttpPost;
import com.koushikdutta.async.http.AsyncHttpResponse;
import com.koushikdutta.async.http.body.AsyncHttpRequestBody;
import com.koushikdutta.async.http.body.JSONObjectBody;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;


{{$className := Outfile | Base | StripExt}}

/**
 * Generated by golait2 - DO NOT EDIT
 */
public class {{$className}} {
    protected static final String _TAG = {{$className}}.class.getName();
    protected static {{$className}} _singleton;
    protected final String _uri;

    protected final AtomicLong _id = new AtomicLong(0);

    public class _RPCException extends Exception {
        public int code;
        public JSONObject data;
        public _RPCException(int code, String message, JSONObject data) {
            super(message);
            this.code = code;
            this.data = data;
        }
    }

    public interface _Callback {
        public void onSuccess(JSONArray result);
        public void onError(Exception e);
    }
    public {{$className}}(String uri) {
        _uri = uri;
    }

    {{range .Methods}}
    public interface on{{.Name}}Result {
        public void onSuccess({{.ResultsJavaFields}})
        public void onError(Exception e);
    }
    protected class on{{.Name}}ResultBridge implements _Callback {
        protected on{{.Name}}Result _callback;
        protected on{{.Name}}ResultBridge(on{{.Name}}Result callback) {
            this._callback = callback;
        }
        public void onSuccess(JSONArray result) {
            try {
                _callback({{.ResultsJavaValues "result"}});
            } catch (JSONException jX) {
                onError(jX);
            }
        }
        public void onError(Expection e) {
            _callback.onError(e);
        }
    }
    public void {{.Name}}({{range .Parameters}}final {{.Field.JavaType}} {{.Field.TitleName}},
        {{- end}} final on{{.Name}}Result _callback) {
        {{if .Parameters -}}
        try {
        {{end -}}
            JSONArray _params = new JSONArray();
            {{range $i, $p := .Parameters}}
            _params.put({{$p.Field.TitleName}});
            {{- end}}
            _rpc("{{.Name}}", _params, new on{{.Name}}ResultBridge(_callback));
        {{if .Parameters -}}
        } catch (JSONException jX) {
            _onerror(jX, _callback);
        }
        {{- end}}
    }
    {{end}}
    {{/*
    public void MyMessage(final String name, final _Callback _callback) {
        try {
            JSONObject params = new JSONObject();
            params.put("0", name);
            _rpc("MyMessage", params, _callback);
        } catch (JSONException jX) {
            _onerror(jX, _callback);
        }
    }
    */}}

    protected void _onerror(final Exception e, final _Callback _callback) {
        if (Looper.getMainLooper().getThread() == Thread.currentThread()) {
            _callback.onError(e);
        } else {
            new Handler(Looper.getMainLooper()).post(new Runnable() {
                @Override
                public void run() {
                    _callback.onError(e);
                }
            });
        }
    }

    protected void _onsuccess(final JSONArray result, final _Callback _callback) {
        if (Looper.getMainLooper().getThread()==Thread.currentThread()) {
            _callback.onSuccess(result);
        } else {
            new Handler(Looper.getMainLooper()).post(new Runnable() {
                @Override
                public void run() {
                    _callback.onSuccess(result);
                }
            });
        }
    }

    protected void _rpc(String method, JSONArray params, final _Callback callback) {
        JSONObject jsonRPC = new JSONObject();
        try {
            // jsonRPC.put("jsonrpc", "2.0");   // We don't check this so why waste the bandwidth?
            jsonRPC.put("method", method);
            jsonRPC.put("params", params);
            jsonRPC.put("id", _id.getAndAdd(1));
        } catch (JSONException JX) {
            _onerror(JX, callback);
            return;
        }

        Log.d(_TAG, "Sending rpc data to " + method);
        AsyncHttpPost post = new AsyncHttpPost(_uri);
        post.setBody(new JSONObjectBody(jsonRPC));
        AsyncHttpClient.getDefaultInstance()
                .executeJSONObject(post, new AsyncHttpClient.JSONObjectCallback() {
                    @Override
                    public void onCompleted(Exception e, AsyncHttpResponse response, JSONObject result) {
                        if (null != e) {
                            _onerror(e, callback);
                            return;
                        }
                        try {
                            if (result.has("error")) {
                                JSONObject err = result.getJSONObject("error");
                                _onerror(new _RPCException(err.optInt("code"), err.optString("message"),
                                        err.optJSONObject("data")), callback);
                                return;
                            } else {
                                _onsuccess(result.getJSONArray("result"), callback);
                            }
                        } catch (JSONException jX) {
                            _onerror(jX, callback);
                        }
                    }
                });
    }

    public synchronized static {{$className}} instance(String uri) {
        if (null==_singleton) {
            _singleton = new {{$className}}(uri);
        }
        return _singleton;
    }
    public synchronized static {{$className}} instance() {
        return _singleton;
    }
}
