package {{.PackageName}};

import android.os.Handler;
import android.os.Looper;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

{{$className := Outfile | Base | StripExt}}

/**
 * Generated by golait2 - DO NOT EDIT
 */
public class {{$className}} {
    protected static final String _TAG = {{$className}}.class.getName();
    protected static final MediaType MEDIA_TYPE_JSON = MediaType.parse("application/json; charset=utf8");

    protected static {{$className}} _singleton;
    protected final String _uri;
    protected OkHttpClient _client = new OkHttpClient();

    protected final AtomicLong _id = new AtomicLong(0);

    protected _RequestBuilder _builder;

    public void setBuilder(_RequestBuilder b) {
        this._builder = b;
    }
    public _RequestBuilder getBuilder() {
        return this._builder;
    }

    public class _RPCException extends Exception {
        public int code;
        public JSONObject data;
        public _RPCException(int code, String message, JSONObject data) {
            super(message);
            this.code = code;
            this.data = data;
        }
    }

    public interface _Callback {
        public void onSuccess(JSONArray result);
        public void onError(Exception e);
    }

    public interface _RequestBuilder {
        public Request.Builder build(Request.Builder b);
    }

    public {{$className}}(String uri) {
        _uri = uri;
    }

    {{range .Methods}}
    public void {{.Name}}({{range .Parameters}}final {{.Field.JavaType}} {{.Field.TitleName}},
        {{- end}} final _Callback _callback) {
        {{if .Parameters -}}
        // try {
        {{end -}}
            // if (false) {
            //     JSONObject fixForExceptionNotThrown = new JSONObject("[\"test\"]");
            // }
            JSONArray _params = new JSONArray();
            {{range $i, $p := .Parameters}}
            _params.put({{$p.Field.TitleName}});
            {{- end}}
            _rpc("{{.Name}}", _params, _callback);
        {{if .Parameters -}}
        // } catch (JSONException jX) {
        //     _onerror(jX, _callback);
        // }
        {{- end}}
    }
    {{end}}
    {{/*
    public void MyMessage(final String name, final _Callback _callback) {
        try {
            JSONObject params = new JSONObject();
            params.put("0", name);
            _rpc("MyMessage", params, _callback);
        } catch (JSONException jX) {
            _onerror(jX, _callback);
        }
    }
    */}}

    protected void _onerror(final Exception e, final _Callback _callback) {
        _callback.onError(e);
    }

    protected void _onsuccess(final JSONArray result, final _Callback _callback) {
        _callback.onSuccess(result);
    }


    protected void _rpc(String method, JSONArray params, final _Callback callback) {
        JSONObject jsonRPC = new JSONObject();
        try {
            // jsonRPC.put("jsonrpc", "2.0");   // We don't check this so why waste the bandwidth?
            jsonRPC.put("method", method);
            jsonRPC.put("params", params);
            jsonRPC.put("id", _id.getAndAdd(1));
        } catch (JSONException JX) {
            _onerror(JX, callback);
            return;
        }

        Log.d(_TAG, "Sending rpc data to " + method);
        Request.Builder b = new Request.Builder()
            .url(_uri)
            .header("User-Agent","OkHttp")
            // .addHeader("Content-Type", "application/json; encoding=\"utf-8\"")
            .addHeader("Accept", "application/json");
        if (null!=getBuilder()) {
            b = getBuilder().build(b);
        }
        b = b.post(RequestBody.create(MEDIA_TYPE_JSON, jsonRPC.toString()));
        
        Request request = b.build();

        _client.newCall(request).enqueue(new Callback() {
            @Override public void onFailure(Call call, IOException e) {
                _onerror(e, callback);
            }
            @Override public void onResponse(Call call, Response response) throws IOException {
                if (!response.isSuccessful()) {
                    _onerror(new IOException("Unexpected response code " + response), callback);
                    return;
                }
                try {
                    JSONObject js = new JSONObject(response.body().string());
                    if (js.has("error")) {
                        JSONObject err = js.getJSONObject("error");
                        _onerror(new _RPCException(err.optInt("code"), 
                                err.optString("message"),
                                err.optJSONObject("data")), callback);
                        return;
                    }
                    _onsuccess(js.getJSONArray("result"), callback);
                } catch (JSONException jsX) {
                    _onerror(jsX, callback);
                }
            }
        });
    }

    public synchronized static {{$className}} instance(String uri) {
        if (null==_singleton) {
            _singleton = new {{$className}}(uri);
        }
        return _singleton;
    }
    public synchronized static {{$className}} instance() {
        return _singleton;
    }
}
